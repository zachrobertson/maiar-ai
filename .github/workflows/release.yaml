---
name: 🚀 Package Release
on:
  push:
    branches:
      - "main"

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  CI: ${{ vars.CI }}
  HUSKY: ${{ vars.HUSKY }}

jobs:
  package-release-prep:
    name: 🧱 Package Release Prep
    runs-on: ubuntu-latest
    outputs:
      source-code: ${{ steps.filter.outputs.source-code }}
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4

      - name: 🎯 Filter Paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: .github/filters.yaml

  generate-docs:
    name: 📚 Generate API Docs
    needs: package-release-prep
    runs-on: ubuntu-latest
    if: ${{ needs.package-release-prep.outputs.source-code == 'true' }}
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🌎 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: package.json
          run_install: false

      - name: 📦 Install Dependencies
        run: pnpm install

      - name: 📚 Generate Docs
        run: pnpm build:website

      - name: 🔧 Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: 🔎📦 Commit Changes on API Doc Changes
        continue-on-error: true
        run: |
          if git diff --quiet website/api; then
            echo "No API documentation changes detected. Failing the job."
            exit 1
          fi

          echo "API documentation has changed from relevant code changes in packages/**/src/*.ts files"
          echo "Committing API documentation changes..."

          git add website/api
          git commit -m "docs(website): update API documentation between commits ${{ github.event.before }}..${{ github.sha }}"
          git push

  # This commit analyzer step is needed because "lerna version --conventional-commits" will not follow conventional commits bump rules and as long as it sees a package source code change it will at least bump a patch version release - https://github.com/lerna/lerna/issues/2379
  commit-analyzer:
    name: 📝 Commit Analyzer
    needs: package-release-prep
    runs-on: ubuntu-latest
    outputs:
      releasable: ${{ steps.analyze.outputs.releasable }}
    if: ${{ needs.package-release-prep.outputs.source-code == 'true' }}
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Analyze Commits
        id: analyze
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0)

          # Fetch all commits since the last tag
          COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s%n%b")

          # Set the default value of releasable to false
          releasable="false"

          while IFS= read -r COMMIT; do
            echo "$COMMIT"
            if echo "$COMMIT" | grep -q "BREAKING CHANGE"; then
              echo "BREAKING CHANGE detected - major version bump"
              releasable="true"
              break
            elif echo "$COMMIT" | grep -q "feat"; then
              echo "feat detected - minor version bump"
              releasable="true"
              break
            elif echo "$COMMIT" | grep -q "fix"; then
              echo "fix detected - patch version bump"
              releasable="true"
              break
            fi
          done <<< "$COMMITS"

          echo "Releasable: $releasable"
          echo "releasable=$releasable" >> "$GITHUB_OUTPUT"

  package-release:
    name: 🚀 Package Release
    needs:
      - generate-docs
      - package-release-prep
      - commit-analyzer
    runs-on: ubuntu-latest
    if: ${{ needs.package-release-prep.outputs.source-code == 'true' && needs.commit-analyzer.outputs.releasable == 'true' }}
    steps:
      - name: 🛒 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: 🌎 Setup Node.js
        uses: actions/setup-node@v4
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        with:
          node-version-file: package.json
          registry-url: https://registry.npmjs.org
          scope: "@maiar-ai"

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: package.json
          run_install: false

      - name: 📦 Install Dependencies
        run: pnpm install

      - name: 🧱 Build Packages
        run: pnpm build:packages

      - name: 🔖 (Tag + Release) Packages to Github Repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm lerna version --yes --no-private --conventional-commits --create-release github --loglevel silly

      - name: 🚀 Publish Packages to NPM
        run: |
          # Publish packages to NPM

          # Get the latest release tag
          git fetch --tags
          LATEST_TAG=$(git tag -l --sort=-v:refname | head -n 1)
          echo "Latest tag from Github: $LATEST_TAG"

          echo "Publishing packages to NPM..."
          echo "NPM Package version $LATEST_TAG"
          pnpm lerna publish from-git --yes --no-private --ignore-scripts --dist-tag latest --loglevel verbose
